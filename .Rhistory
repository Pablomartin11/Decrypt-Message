runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
knitr::opts_chunk$set(echo = TRUE)
source("FuncionesDesencriptado.R")
if (!require("r2r")) install.packages("r2r")
if (!require("dplyr")) install.packages("dplyr")
if (!require("data.table")) install.packages("data.table")
bigrams <- read.csv("bigramas_espanol.txt", sep="")
words_length <- read.csv("long_palabras_espanol.txt", sep="")
trigrams <- read.csv("trigramas_espanol.txt", sep="")
colnames(trigrams) <- c("trigrama","frecuencia")
message <- paste(readLines("mensaje_cifrado.txt"), collapse="\n")
bigrams[,2] <- log(bigrams[,2],10)
bigrams <- na.exclude(bigrams)
trigrams[,2] <- log(trigrams[,2],10)
trigrams <- na.exclude(trigrams)
words_length[,2] <- log(words_length[,2],10)
data.table(head(bigrams))
data.table(head(words_length))
data.table(head(trigrams))
message
# Decrypt a message by a combination given.
decrypt<- function(message, combination){
decrypted_message <- decodificador(mensaje_a_numero(message),combination)
decrypted_message <- mensaje_a_letra(decrypted_message)
return(decrypted_message)
}
# Split a message by spaces.
split_message <- function(message){
split_message <- strsplit(message,split=" ")
split_message <- unlist(split_message)
return(split_message)
}
#### s1 Function #####
# Given a word, returns the frequency of that word's length.
# It has to be between 1 and 23, in any other case, the function will return 0.
s1 <- function(word){
word_length <- nchar(word)
if (word_length != 0 & word_length <=23){
s1T <- words_length[word_length,2]
}else{
s1T <- -8
}
return(as.numeric(s1T))
}
#### Score 1 Function ####
# Given the split message, we sum all the s1 scores from every word of the message.
score1 <- function(split_message){
score1T <- 0
for (word in split_message){
score1T <- score1T + s1(word)
}
return(score1T)
}
#### s2 Function ####
# Given a word, returns the sum of the frequencys of all the possible bigrams the word has.
# Because of the frequency's file has been log-transformed, we are doing additions.
# If a bigram not exists in the frequency's file, we will multiply by 10^-8, but because of the transformation, we substract 8 units.
s2 <- function(word){
word_length <- nchar(word)
s2T <- 0
if (word_length < 2){
if (word %in% c('Y','A','O')){
return(8)
}else return(0)
}
for (i in 1:(word_length-1)){
bigram <- substr(word,i,i+1)
if (bigram %in% bigrams$bigrama){
s2T <- s2T + as.numeric(bigrams[bigrams$bigrama == bigram,2][1])
}else{
s2T <- s2T - 8
}
}
return(s2T)
}
#### Score 2 Function ####
# Given the split message, we sum all the s2 scores from every word of the message.
score2 <- function(split_message){
score2T <- 0
for (word in split_message){
score2T <- score2T + s2(word)
}
return(score2T)
}
#### s3 Function ####
# Given a word, returns the sum of the frequencys of all the possible trigrams the word has.
# Because of the frequency's file has been log-transformed, we are doing additions, instead of multiplications.
# If a bigram not exists in the frequency's file, we will multiply by 10^-8, but because of the transformation, we substract 8 units.
s3 <- function(word){
word_length <- nchar(word)
s3T <- 0
if (word_length < 3){
return(0)
}
for (i in 1:(word_length-2)){
trigram <- substr(word,i,i+2)
if (trigram %in% trigrams$trigrama){
s3T <- s3T + as.numeric(trigrams[trigrams$trigrama == trigram,2][1])
} else{
s3T <- s3T - 8
}
}
return(s3T)
}
#### Score 3 Function ####
# Given the split message, we sum all the s3 scores from every word of the message.
score3 <- function(split_message){
score3T <- 0
for (word in split_message){
score3T <- score3T + s3(word)
}
return(score3T)
}
#### Score Function ####
# Given a message, this is split by spaces and calculated its specified score by a previous thought formula.
score <- function(message){
split_message <- split_message(message)
scoreT <- 3*score1(split_message) + score2(split_message) + (1/2)*score3(split_message)
return(scoreT)
}
decrypt_message <- function(message){
# Initialize the scores hashmap.
scores <- hashmap(default = 0)
# The first combination used, has to be random
currentCombination <- sample(1:28)
message_init <- decrypt(message,currentCombination)
maxScore <- score(message_init)
scores[[toString(currentCombination)]] <- maxScore
# Metropolis-Hastings Algorithm
N <- 5000
for (iteration in 1:N) {
swaps <- sample(1:28,2)
newCombination <- currentCombination
newCombination[swaps[1]] <- currentCombination[swaps[2]]
newCombination[swaps[2]] <- currentCombination[swaps[1]]
# Check if the current combination is in the hashmap.
if (scores[[toString(newCombination)]] != 0){
newScore <- scores[[toString(newCombination)]]
} else{
newMessage <- decrypt(message,newCombination)
newScore <- score(newMessage)
scores[[toString(newCombination)]] <- newScore
}
# Validate the change.
if (runif(1) < exp(newScore - maxScore)){
maxScore <- newScore
currentCombination <- newCombination
}
if ((iteration %%  100) == 0){
cat("Iteracion: ",iteration, ", Score actual: ",newScore, ", Score Max: ",maxScore,"\n",decrypt(message,currentCombination),"\n\n")
}
}
decryptedMessage <- decrypt(message,currentCombination)
return(decryptedMessage)
}
decrypt_message(message)
decrypt_message <- function(message){
# Initialize the scores hashmap.
scores <- hashmap(default = 0)
# The first combination used, has to be random
maxCombination <- sample(1:28)
message_init <- decrypt(message,maxCombination)
maxScore <- score(message_init)
scores[[toString(maxCombination)]] <- maxScore
# Metropolis-Hastings Algorithm
N <- 5000
for (iteration in 1:N) {
swaps <- sample(1:28,2)
newCombination <- maxCombination
newCombination[swaps[1]] <- maxCombination[swaps[2]]
newCombination[swaps[2]] <- maxCombination[swaps[1]]
# Check if the current combination is in the hashmap.
if (scores[[toString(newCombination)]] == 0){
newMessage <- decrypt(message,newCombination)
newScore <- score(newMessage)
scores[[toString(newCombination)]] <- newScore
} else{
newScore <- scores[[toString(newCombination)]]
}
# Validate the change.
if (runif(1) < exp(newScore - maxScore)){
maxScore <- newScore
maxCombination <- newCombination
}
if ((iteration %%  100) == 0){
cat("Iteracion: ",iteration, ", Score actual: ",newScore, ", Score Max: ",maxScore,"\n",decrypt(message,maxCombination),"\n\n")
}
}
decryptedMessage <- decrypt(message,maxCombination)
return(decryptedMessage)
}
decrypt_message(message)
knitr::opts_chunk$set(echo = TRUE)
source("FuncionesDesencriptado.R")
if (!require("r2r")) install.packages("r2r")
if (!require("dplyr")) install.packages("dplyr")
if (!require("data.table")) install.packages("data.table")
bigrams <- read.csv("bigramas_espanol.txt", sep="")
words_length <- read.csv("long_palabras_espanol.txt", sep="")
trigrams <- read.csv("trigramas_espanol.txt", sep="")
colnames(trigrams) <- c("trigrama","frecuencia")
message <- paste(readLines("mensaje_cifrado.txt"), collapse="\n")
bigrams[,2] <- log(bigrams[,2],10)
bigrams <- na.exclude(bigrams)
trigrams[,2] <- log(trigrams[,2],10)
trigrams <- na.exclude(trigrams)
words_length[,2] <- log(words_length[,2],10)
data.table(head(bigrams))
data.table(head(words_length))
data.table(head(trigrams))
message
# Decrypt a message by a combination given.
decrypt<- function(message, combination){
decrypted_message <- decodificador(mensaje_a_numero(message),combination)
decrypted_message <- mensaje_a_letra(decrypted_message)
return(decrypted_message)
}
# Split a message by spaces.
split_message <- function(message){
split_message <- strsplit(message,split=" ")
split_message <- unlist(split_message)
return(split_message)
}
#### s1 Function #####
# Given a word, returns the frequency of that word's length.
# It has to be between 1 and 23, in any other case, the function will return 0.
s1 <- function(word){
word_length <- nchar(word)
if (word_length != 0 & word_length <=23){
s1T <- words_length[word_length,2]
}else{
s1T <- -8
}
return(as.numeric(s1T))
}
#### Score 1 Function ####
# Given the split message, we sum all the s1 scores from every word of the message.
score1 <- function(split_message){
score1T <- 0
for (word in split_message){
score1T <- score1T + s1(word)
}
return(score1T)
}
#### s2 Function ####
# Given a word, returns the sum of the frequencys of all the possible bigrams the word has.
# Because of the frequency's file has been log-transformed, we are doing additions.
# If a bigram not exists in the frequency's file, we will multiply by 10^-8, but because of the transformation, we substract 8 units.
s2 <- function(word){
word_length <- nchar(word)
s2T <- 0
if (word_length < 2){
if (word %in% c('Y','A','O')){
return(8)
}else return(0)
}
for (i in 1:(word_length-1)){
bigram <- substr(word,i,i+1)
if (bigram %in% bigrams$bigrama){
s2T <- s2T + as.numeric(bigrams[bigrams$bigrama == bigram,2][1])
}else{
s2T <- s2T - 8
}
}
return(s2T)
}
#### Score 2 Function ####
# Given the split message, we sum all the s2 scores from every word of the message.
score2 <- function(split_message){
score2T <- 0
for (word in split_message){
score2T <- score2T + s2(word)
}
return(score2T)
}
#### s3 Function ####
# Given a word, returns the sum of the frequencys of all the possible trigrams the word has.
# Because of the frequency's file has been log-transformed, we are doing additions, instead of multiplications.
# If a bigram not exists in the frequency's file, we will multiply by 10^-8, but because of the transformation, we substract 8 units.
s3 <- function(word){
word_length <- nchar(word)
s3T <- 0
if (word_length < 3){
return(0)
}
for (i in 1:(word_length-2)){
trigram <- substr(word,i,i+2)
if (trigram %in% trigrams$trigrama){
s3T <- s3T + as.numeric(trigrams[trigrams$trigrama == trigram,2][1])
} else{
s3T <- s3T - 8
}
}
return(s3T)
}
#### Score 3 Function ####
# Given the split message, we sum all the s3 scores from every word of the message.
score3 <- function(split_message){
score3T <- 0
for (word in split_message){
score3T <- score3T + s3(word)
}
return(score3T)
}
#### Score Function ####
# Given a message, this is split by spaces and calculated its specified score by a previous thought formula.
score <- function(message){
split_message <- split_message(message)
scoreT <- 3*score1(split_message) + score2(split_message) + (1/2)*score3(split_message)
return(scoreT)
}
decrypt_message <- function(message){
# Initialize the scores hashmap.
scores <- hashmap(default = 0)
# The first combination used, has to be random
maxCombination <- sample(1:28)
message_init <- decrypt(message,maxCombination)
maxScore <- score(message_init)
scores[[toString(maxCombination)]] <- maxScore
# Metropolis-Hastings Algorithm
N <- 5000
for (iteration in 1:N) {
swaps <- sample(1:28,2)
newCombination <- maxCombination
newCombination[swaps[1]] <- maxCombination[swaps[2]]
newCombination[swaps[2]] <- maxCombination[swaps[1]]
# Check if the current combination is in the hashmap.
if (scores[[toString(newCombination)]] == 0){
newMessage <- decrypt(message,newCombination)
newScore <- score(newMessage)
scores[[toString(newCombination)]] <- newScore
} else{
newScore <- scores[[toString(newCombination)]]
}
# Validate the change.
if (runif(1) < 10^(newScore - maxScore)){
maxScore <- newScore
maxCombination <- newCombination
}
if ((iteration %%  100) == 0){
cat("Iteracion: ",iteration, ", Score actual: ",newScore, ", Score Max: ",maxScore,"\n",decrypt(message,maxCombination),"\n\n")
}
}
decryptedMessage <- decrypt(message,maxCombination)
return(decryptedMessage)
}
decrypt_message(message)
knitr::opts_chunk$set(echo = TRUE)
source("FuncionesDesencriptado.R")
if (!require("r2r")) install.packages("r2r")
if (!require("dplyr")) install.packages("dplyr")
if (!require("data.table")) install.packages("data.table")
bigrams <- read.csv("bigramas_espanol.txt", sep="")
words_length <- read.csv("long_palabras_espanol.txt", sep="")
trigrams <- read.csv("trigramas_espanol.txt", sep="")
colnames(trigrams) <- c("trigrama","frecuencia")
message <- paste(readLines("mensaje_cifrado.txt"), collapse="\n")
bigrams[,2] <- log(bigrams[,2],10)
bigrams <- na.exclude(bigrams)
trigrams[,2] <- log(trigrams[,2],10)
trigrams <- na.exclude(trigrams)
words_length[,2] <- log(words_length[,2],10)
data.table(head(bigrams))
data.table(head(words_length))
data.table(head(trigrams))
message
# Decrypt a message by a combination given.
decrypt<- function(message, combination){
decrypted_message <- decodificador(mensaje_a_numero(message),combination)
decrypted_message <- mensaje_a_letra(decrypted_message)
return(decrypted_message)
}
# Split a message by spaces.
split_message <- function(message){
split_message <- strsplit(message,split=" ")
split_message <- unlist(split_message)
return(split_message)
}
#### s1 Function #####
# Given a word, returns the frequency of that word's length.
# It has to be between 1 and 23, in any other case, the function will return 0.
s1 <- function(word){
word_length <- nchar(word)
if (word_length != 0 & word_length <=23){
s1T <- words_length[word_length,2]
}else{
s1T <- -8
}
return(as.numeric(s1T))
}
#### Score 1 Function ####
# Given the split message, we sum all the s1 scores from every word of the message.
score1 <- function(split_message){
score1T <- 0
for (word in split_message){
score1T <- score1T + s1(word)
}
return(score1T)
}
#### s2 Function ####
# Given a word, returns the sum of the frequencys of all the possible bigrams the word has.
# Because of the frequency's file has been log-transformed, we are doing additions.
# If a bigram not exists in the frequency's file, we will multiply by 10^-8, but because of the transformation, we substract 8 units.
s2 <- function(word){
word_length <- nchar(word)
s2T <- 0
if (word_length < 2){
if (word %in% c('Y','A','O')){
return(8)
}else return(0)
}
for (i in 1:(word_length-1)){
bigram <- substr(word,i,i+1)
if (bigram %in% bigrams$bigrama){
s2T <- s2T + as.numeric(bigrams[bigrams$bigrama == bigram,2][1])
}else{
s2T <- s2T - 8
}
}
return(s2T)
}
#### Score 2 Function ####
# Given the split message, we sum all the s2 scores from every word of the message.
score2 <- function(split_message){
score2T <- 0
for (word in split_message){
score2T <- score2T + s2(word)
}
return(score2T)
}
#### s3 Function ####
# Given a word, returns the sum of the frequencys of all the possible trigrams the word has.
# Because of the frequency's file has been log-transformed, we are doing additions, instead of multiplications.
# If a bigram not exists in the frequency's file, we will multiply by 10^-8, but because of the transformation, we substract 8 units.
s3 <- function(word){
word_length <- nchar(word)
s3T <- 0
if (word_length < 3){
return(0)
}
for (i in 1:(word_length-2)){
trigram <- substr(word,i,i+2)
if (trigram %in% trigrams$trigrama){
s3T <- s3T + as.numeric(trigrams[trigrams$trigrama == trigram,2][1])
} else{
s3T <- s3T - 8
}
}
return(s3T)
}
#### Score 3 Function ####
# Given the split message, we sum all the s3 scores from every word of the message.
score3 <- function(split_message){
score3T <- 0
for (word in split_message){
score3T <- score3T + s3(word)
}
return(score3T)
}
#### Score Function ####
# Given a message, this is split by spaces and calculated its specified score by a previous thought formula.
score <- function(message){
split_message <- split_message(message)
scoreT <- 3*score1(split_message) + score2(split_message) + (1/2)*score3(split_message)
return(scoreT)
}
decrypt_message <- function(message){
# Initialize the scores hashmap.
scores <- hashmap(default = 0)
# The first combination used, has to be random
maxCombination <- sample(1:28)
message_init <- decrypt(message,maxCombination)
maxScore <- score(message_init)
scores[[toString(maxCombination)]] <- maxScore
# Metropolis-Hastings Algorithm
N <- 5000
for (iteration in 1:N) {
swaps <- sample(1:28,2)
newCombination <- maxCombination
newCombination[swaps[1]] <- maxCombination[swaps[2]]
newCombination[swaps[2]] <- maxCombination[swaps[1]]
# Check if the current combination is in the hashmap.
if (scores[[toString(newCombination)]] == 0){
newMessage <- decrypt(message,newCombination)
newScore <- score(newMessage)
scores[[toString(newCombination)]] <- newScore
} else{
newScore <- scores[[toString(newCombination)]]
}
# Validate the change.
if (runif(1) < 10^(newScore - maxScore)){
maxScore <- newScore
maxCombination <- newCombination
}
if ((iteration %%  100) == 0){
cat("Iteracion: ",iteration, ", Score actual: ",newScore, ", Score Max: ",maxScore,"\n",decrypt(message,maxCombination),"\n\n")
}
}
decryptedMessage <- decrypt(message,maxCombination)
return(decryptedMessage)
}
decrypt_message(message)
decrypt_message(message)
decrypt_message(message)
decrypt_message(message)
decrypt_message(message)
tinytex::install_tinytex()
tinytex::install_tinytex()
